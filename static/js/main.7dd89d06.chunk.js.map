{"version":3,"sources":["components/styles/GlobalStyle.js","hooks/useWindowDimensions.js","components/Wrapper/parts.js","components/Wrapper/Wrapper.jsx","constants/constants.js","components/generics/Title/parts.js","components/generics/Title/Title.jsx","components/generics/Panel/parts.js","components/generics/Panel/Panel.jsx","components/DraggableItem/parts.js","components/DraggableItem/DraggableItem.jsx","components/generics/PropertySlider/parts.js","components/generics/PropertySlider/PropertySlider.jsx","contexts/boxShadowContext.js","components/UserPanel/parts.js","components/UserPanel/UserPanel.jsx","components/TestBox/parts.js","components/TestBox/TestBox.jsx","components/PreviewPanel/PreviewPanel.jsx","theme/theme.js","components/App/App.jsx","index.js"],"names":["GlobalStyle","createGlobalStyle","getWindowDimensions","window","width","innerWidth","height","innerHeight","Container","styled","div","theme","colors","white","MobileScreen","disabled","fontSize","l","Wrapper","children","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","isDesktopScreen","Text","h1","black","xxl","Title","text","Panel","Item","button","attrs","style","left","position","secondary","xs","m","DraggableItem","min","max","setValue","value","setPosition","parentElement","setParentElement","testRef","useRef","current","moveItem","e","getBoundingClientRect","newPosition","clientX","step","newValue","Math","floor","DRAGGABLE_ITEM_WIDTH","stopDrag","document","onMouseDown","ref","margin","s","PropertyName","h2","xl","Slider","borderRadius","accent_2","PropertySlider","name","onChange","sliderRef","setChoosenPosition","mouseX","DRAGGABLE_WIDTH","setStartPosition","abs","onClick","BoxShadowContext","createContext","BoxShadowContextProvider","offsetX","setOffsetX","offsetY","setOffsetY","spread","setSpread","blur","setBlur","currentColor","setCurrentColor","Provider","ActionButtonsWrapper","ColorPickerWrapper","ColorPicker","input","letterSpacing","padding","CopyButton","isTextCopied","TextPicker","CopyInfo","span","enabled","UserPanel","textInputRef","setIsTextCopied","useContext","type","readOnly","spellCheck","inputElement","clipboard","select","setSelectionRange","navigator","writeText","setTimeout","target","Box","boxShadow","primary","TestBox","PreviewPanel","boxShadowContext","font","accent_1","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7dd89d06.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\nbody {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    font-family: 'Bebas Neue', cursive;\r\n}\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import { useState, useEffect } from 'react';\r\n\r\nconst getWindowDimensions = () => {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return { width, height };\r\n};\r\n\r\nexport default function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(\r\n    getWindowDimensions()\r\n  );\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWindowDimensions(getWindowDimensions());\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-around;\r\n    gap: 10px;\r\n\r\n    width: 100vw;\r\n    max-width: 1600px;\r\n    height: 100vh;\r\n    margin: 0 auto;\r\n\r\n    background-color: ${({ theme }) => theme.colors.white};\r\n`;\r\n\r\nexport const MobileScreen = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    width: 100vw;\r\n    height: 100vh;\r\n\r\n    background-color: ${({ theme }) => theme.colors.disabled};\r\n    color: ${({ theme }) => theme.colors.white};\r\n\r\n    font-size: ${({ theme }) => theme.fontSize.l};\r\n    text-align: center;\r\n`;\r\n","import { mobileInfo } from '../../constants/constants';\r\nimport useWindowDimensions from '../../hooks/useWindowDimensions';\r\nimport * as P from './parts';\r\n\r\nconst Wrapper = ({ children }) => {\r\n    const { width, height } = useWindowDimensions();\r\n    const isDesktopScreen = width >= 800 && height >= 600;\r\n\r\n    return (\r\n        <>\r\n            {isDesktopScreen ? (\r\n                <P.Container>{children}</P.Container>\r\n            ) : (\r\n                <P.MobileScreen>{mobileInfo}</P.MobileScreen>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Wrapper;\r\n","export const title = 'box-shadow css generator';\r\n\r\nexport const mobileInfo =\r\n    'Sorry the application is only available on the devices with minimum 800 x 600 resolution';\r\n","import styled from 'styled-components';\r\n\r\nexport const Text = styled.h1`\r\n    width: 100%;\r\n\r\n    color: ${({ theme }) => theme.colors.black};\r\n\r\n    font-size: ${({ theme }) => theme.fontSize.xxl};\r\n    text-transform: uppercase;\r\n    text-align: center;\r\n`;\r\n","import * as P from './parts';\r\n\r\nconst Title = ({ text }) => {\r\n  return <P.Text>{text}</P.Text>;\r\n};\r\n\r\nexport default Title;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    position: relative;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n    overflow: hidden;\r\n\r\n    width: calc(50% - 10px);\r\n    max-width: 650px;\r\n    height: 70%;\r\n    box-shadow: 0 0 1px 0 ${({ theme }) => theme.colors.black};\r\n\r\n    background-color: ${({ theme }) => theme.colors.white};\r\n`;\r\n","import * as P from './parts';\r\n\r\nconst Panel = ({ children }) => {\r\n  return <P.Wrapper>{children}</P.Wrapper>;\r\n};\r\n\r\nexport default Panel;\r\n","import styled from 'styled-components';\r\n\r\nexport const Item = styled.button.attrs(({ position }) => ({\r\n    style: {\r\n        left: position,\r\n    },\r\n}))`\r\n    position: absolute;\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    width: 40px;\r\n    height: 20px;\r\n    border: none;\r\n    box-shadow: 0 0 1px 1px ${({ theme }) => theme.colors.white};\r\n\r\n    background-color: ${({ theme }) => theme.colors.secondary};\r\n    color: ${({ theme }) => theme.colors.white};\r\n\r\n    font-size: ${({ theme }) => theme.fontSize.xs};\r\n    font-weight: 700;\r\n\r\n    cursor: grab;\r\n\r\n    @media (min-width: 1280px) {\r\n        font-size: ${({ theme }) => theme.fontSize.m};\r\n    }\r\n`;\r\n","import { useEffect, useRef, useState } from 'react';\r\nimport * as P from './parts';\r\n\r\nconst DRAGGABLE_ITEM_WIDTH = 30;\r\n\r\nconst DraggableItem = ({\r\n    min,\r\n    max,\r\n    setValue,\r\n    value,\r\n    setPosition,\r\n    position,\r\n}) => {\r\n    const [parentElement, setParentElement] = useState(null);\r\n    const testRef = useRef();\r\n\r\n    useEffect(() => {\r\n        setParentElement(testRef.current.parentElement);\r\n    }, []);\r\n\r\n    const moveItem = (e) => {\r\n        const { width, left } = parentElement.getBoundingClientRect();\r\n\r\n        let newPosition = e.clientX - left;\r\n\r\n        if (newPosition < 0) newPosition = 0;\r\n        else if (newPosition > width) newPosition = width;\r\n\r\n        if (newPosition < 0) {\r\n            setValue(min);\r\n            return;\r\n        }\r\n        if (newPosition > width) {\r\n            setValue(max);\r\n            return;\r\n        }\r\n\r\n        const step = width / (max - min);\r\n        const newValue = Math.floor(newPosition / step + min);\r\n\r\n        setValue(newValue);\r\n        setPosition(newPosition - DRAGGABLE_ITEM_WIDTH / 2);\r\n    };\r\n\r\n    const startDrag = (e) => {\r\n        document.addEventListener('mousemove', moveItem);\r\n        document.addEventListener('mouseup', stopDrag);\r\n    };\r\n\r\n    const stopDrag = () => {\r\n        document.removeEventListener('mousemove', moveItem);\r\n        document.removeEventListener('mouseup', stopDrag);\r\n    };\r\n\r\n    return (\r\n        <P.Item onMouseDown={startDrag} position={position} ref={testRef}>\r\n            {value}\r\n        </P.Item>\r\n    );\r\n};\r\n\r\nexport default DraggableItem;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n\r\n    max-height: 70px;\r\n    margin: ${({ theme }) => theme.margin.s} ${({ theme }) => theme.margin.xxl};\r\n`;\r\n\r\nexport const PropertyName = styled.h2`\r\n    font-size: ${({ theme }) => theme.fontSize.xl};\r\n    text-transform: uppercase;\r\n\r\n    @media (min-width: 1280px) {\r\n        font-size: ${({ theme }) => theme.fontSize.xxl};\r\n    }\r\n`;\r\n\r\nexport const Slider = styled.div`\r\n    position: relative;\r\n\r\n    width: 50%;\r\n    height: 20px;\r\n    border-radius: ${({ theme }) => theme.borderRadius.s};\r\n\r\n    background-color: ${({ theme }) => theme.colors.accent_2};\r\n`;\r\n","import { useState, useRef, useEffect } from 'react';\r\nimport DraggableItem from '../../DraggableItem';\r\nimport * as P from './parts';\r\n\r\nconst DRAGGABLE_WIDTH = 30;\r\n\r\nconst PropertySlider = ({\r\n    name,\r\n    min,\r\n    max,\r\n    onChange = () => {},\r\n    value,\r\n    setValue,\r\n}) => {\r\n    const sliderRef = useRef(null);\r\n    const [position, setPosition] = useState(value);\r\n\r\n    const setChoosenPosition = (e) => {\r\n        const { left, width } = sliderRef.current.getBoundingClientRect();\r\n\r\n        if (e.clientX < left || e.clientX > left + width) return;\r\n\r\n        const mouseX = e.clientX - left;\r\n        const step = width / (max - min);\r\n        const newValue = mouseX / step + min;\r\n\r\n        setPosition(mouseX - DRAGGABLE_WIDTH / 2);\r\n        setValue(Math[newValue > 0 ? 'ceil' : 'floor'](newValue));\r\n    };\r\n\r\n    const setStartPosition = () => {\r\n        const { width } = sliderRef.current.getBoundingClientRect();\r\n        const step = width / (max - min);\r\n        setValue(value);\r\n\r\n        let newPosition;\r\n\r\n        if (value === 0 && min < 0) {\r\n            newPosition = width / 2;\r\n        } else if (value < 0) {\r\n            newPosition = width / 2 - step * Math.abs(value);\r\n        } else {\r\n            newPosition = step * value;\r\n        }\r\n\r\n        setPosition(newPosition - DRAGGABLE_WIDTH / 2);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setStartPosition();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        onChange(value);\r\n    }, [value]);\r\n\r\n    return (\r\n        <>\r\n            <P.Wrapper>\r\n                <P.PropertyName>{name}</P.PropertyName>\r\n                <P.Slider ref={sliderRef} onClick={setChoosenPosition}>\r\n                    <DraggableItem\r\n                        min={min}\r\n                        max={max}\r\n                        position={position}\r\n                        setPosition={setPosition}\r\n                        setChoosenPosition={setChoosenPosition}\r\n                        setStartPosition={setStartPosition}\r\n                        setValue={setValue}\r\n                        value={value}\r\n                    />\r\n                </P.Slider>\r\n            </P.Wrapper>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PropertySlider;\r\n","import { createContext, useState } from 'react';\r\n\r\nconst BoxShadowContext = createContext();\r\n\r\nexport const BoxShadowContextProvider = ({ children }) => {\r\n    const [offsetX, setOffsetX] = useState(0);\r\n    const [offsetY, setOffsetY] = useState(0);\r\n    const [spread, setSpread] = useState(0);\r\n    const [blur, setBlur] = useState(0);\r\n    const [currentColor, setCurrentColor] = useState('#000000');\r\n    return (\r\n        <BoxShadowContext.Provider\r\n            value={{\r\n                offsetX,\r\n                setOffsetX,\r\n                offsetY,\r\n                setOffsetY,\r\n                spread,\r\n                setSpread,\r\n                blur,\r\n                setBlur,\r\n                currentColor,\r\n                setCurrentColor,\r\n            }}\r\n        >\r\n            {children}\r\n        </BoxShadowContext.Provider>\r\n    );\r\n};\r\n\r\nexport default BoxShadowContext;\r\n","import styled from 'styled-components';\r\n\r\nexport const ActionButtonsWrapper = styled.div`\r\n    position: relative;\r\n\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin: 0 ${({ theme }) => theme.margin.xl};\r\n`;\r\n\r\nexport const ColorPickerWrapper = styled.div`\r\n    width: 150px;\r\n    height: 40px;\r\n`;\r\n\r\nexport const ColorPicker = styled.input`\r\n    position: relative;\r\n\r\n    width: 100%;\r\n    height: 100%;\r\n    border: none;\r\n    padding: 0;\r\n\r\n    cursor: pointer;\r\n    appearance: none;\r\n    color: ${({ theme }) => theme.colors.white};\r\n    letter-spacing: ${({ theme }) => theme.letterSpacing.m};\r\n\r\n    &::-webkit-color-swatch {\r\n        border: none;\r\n        padding: 0;\r\n        margin: 0;\r\n        outline: none;\r\n    }\r\n\r\n    &::-webkit-color-swatch-wrapper {\r\n        padding: 0;\r\n    }\r\n\r\n    &::before {\r\n        content: 'set color';\r\n\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n\r\n        transform: translate(-50%, -50%);\r\n\r\n        font-size: ${({ theme }) => theme.fontSize.s};\r\n        font-family: 'Bebas Neue', cursive;\r\n        padding: ${({ theme }) => `${theme.padding.xs} ${theme.padding.s}`};\r\n        background-color: ${({ theme }) => theme.colors.secondary};\r\n    }\r\n`;\r\n\r\nexport const CopyButton = styled.button`\r\n    position: relative;\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 150px;\r\n    height: 100%;\r\n\r\n    letter-spacing: ${({ theme }) => theme.letterSpacing.m};\r\n\r\n    border: none;\r\n    background-color: ${({ theme }) => theme.colors.accent_2};\r\n    color: ${({ theme }) => theme.colors.white};\r\n\r\n    font-size: ${({ isTextCopied }) => (isTextCopied ? '0' : '14px')};\r\n    text-transform: uppercase;\r\n    font-family: 'Bebas Neue', cursive;\r\n\r\n    cursor: pointer;\r\n`;\r\n\r\nexport const TextPicker = styled.input`\r\n    height: 30px;\r\n    border: none;\r\n    box-shadow: 0 0 2px 0 black;\r\n    margin: 0 ${({ theme }) => theme.margin.xl};\r\n    padding: ${({ theme }) => `${theme.padding.xs} ${theme.padding.m}`};\r\n\r\n    outline: none;\r\n    letter-spacing: ${({ theme }) => theme.letterSpacing.m};\r\n\r\n    color: ${({ theme }) => theme.colors.white};\r\n    background-color: ${({ theme }) => theme.colors.secondary};\r\n\r\n    font-weight: 700;\r\n`;\r\n\r\nexport const CopyInfo = styled.span`\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n\r\n    transform: translate(-50%, -50%);\r\n\r\n    color: ${({ theme }) => theme.colors.enabled};\r\n    font-size: ${({ theme }) => theme.fontSize.s};\r\n`;\r\n","import { useContext, useRef, useState } from 'react';\r\nimport Panel from '../generics/Panel';\r\nimport PropertySlider from '../generics/PropertySlider';\r\nimport BoxShadowContext from '../../contexts/boxShadowContext';\r\nimport * as P from './parts';\r\n\r\nconst UserPanel = () => {\r\n    const textInputRef = useRef(null);\r\n    const [isTextCopied, setIsTextCopied] = useState(false);\r\n\r\n    const {\r\n        offsetX,\r\n        setOffsetX,\r\n        offsetY,\r\n        setOffsetY,\r\n        blur,\r\n        setBlur,\r\n        spread,\r\n        setSpread,\r\n        currentColor,\r\n        setCurrentColor,\r\n    } = useContext(BoxShadowContext);\r\n\r\n    const pickColor = (e) => {\r\n        setCurrentColor(e.target.value);\r\n    };\r\n\r\n    const copyBoxShadowProperty = () => {\r\n        const inputElement = textInputRef.current;\r\n        const clipboard = textInputRef.current.value;\r\n\r\n        inputElement.select();\r\n        inputElement.setSelectionRange(0, 99999);\r\n        navigator.clipboard.writeText(clipboard);\r\n\r\n        setIsTextCopied(true);\r\n        setTimeout(() => setIsTextCopied(false), 2000);\r\n    };\r\n\r\n    return (\r\n        <Panel>\r\n            <PropertySlider\r\n                value={offsetX}\r\n                setValue={setOffsetX}\r\n                name=\"offset x\"\r\n                min={-100}\r\n                max={100}\r\n            />\r\n            <PropertySlider\r\n                value={offsetY}\r\n                setValue={setOffsetY}\r\n                name=\"offset y\"\r\n                min={-100}\r\n                max={100}\r\n            />\r\n            <PropertySlider\r\n                value={spread}\r\n                setValue={setSpread}\r\n                name=\"spread\"\r\n                min={0}\r\n                max={50}\r\n            />\r\n            <PropertySlider\r\n                value={blur}\r\n                setValue={setBlur}\r\n                name=\"blur\"\r\n                min={0}\r\n                max={50}\r\n            />\r\n            <P.TextPicker\r\n                ref={textInputRef}\r\n                type=\"text\"\r\n                value={`box-shadow: ${offsetX}px ${offsetY}px ${spread}px ${blur}px ${currentColor}`}\r\n                readOnly\r\n                spellCheck={false}\r\n            />\r\n            <P.ActionButtonsWrapper>\r\n                <P.CopyButton\r\n                    isTextCopied={isTextCopied}\r\n                    onClick={copyBoxShadowProperty}\r\n                >\r\n                    copy\r\n                    {isTextCopied && <P.CopyInfo>copied!</P.CopyInfo>}\r\n                </P.CopyButton>\r\n                <P.ColorPickerWrapper>\r\n                    <P.ColorPicker\r\n                        type=\"color\"\r\n                        value={currentColor}\r\n                        onChange={pickColor}\r\n                    />\r\n                </P.ColorPickerWrapper>\r\n            </P.ActionButtonsWrapper>\r\n        </Panel>\r\n    );\r\n};\r\n\r\nexport default UserPanel;\r\n","import styled from 'styled-components';\r\n\r\nexport const Box = styled.div.attrs(({ value }) => ({\r\n    style: {\r\n        boxShadow: `${value.offsetX}px ${value.offsetY}px ${value.spread}px ${value.blur}px ${value.currentColor}`,\r\n    },\r\n}))`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-self: center;\r\n    width: 200px;\r\n    height: 200px;\r\n\r\n    background-color: ${({ theme }) => theme.colors.primary};\r\n\r\n    @media (min-width: 1280px) {\r\n        width: 300px;\r\n        height: 300px;\r\n    }\r\n`;\r\n","import * as P from './parts';\r\n\r\nconst TestBox = ({ value }) => {\r\n  return <P.Box value={value} />;\r\n};\r\n\r\nexport default TestBox;\r\n","import { useContext } from 'react';\r\nimport Panel from '../generics/Panel';\r\nimport TestBox from '../TestBox';\r\nimport boxShadowContext from '../../contexts/boxShadowContext';\r\n\r\nconst PreviewPanel = () => {\r\n  const value = useContext(boxShadowContext);\r\n  return (\r\n    <Panel>\r\n      <TestBox value={value} />\r\n    </Panel>\r\n  );\r\n};\r\n\r\nexport default PreviewPanel;\r\n","export const theme = {\r\n    colors: {\r\n        font: '#555',\r\n        primary: '#C4E4F6',\r\n        secondary: '#444',\r\n        accent_1: '#777',\r\n        accent_2: '#5D7EE3',\r\n        white: '#FFF',\r\n        black: '#000',\r\n        enabled: '#75db88',\r\n        disabled: '#963547',\r\n    },\r\n\r\n    fontSize: {\r\n        xs: '12px',\r\n        s: '14px',\r\n        m: '16px',\r\n        l: '20px',\r\n        xl: '24px',\r\n        xxl: '32px',\r\n    },\r\n\r\n    borderRadius: {\r\n        s: '2px',\r\n        m: '4px',\r\n        l: '6px',\r\n        xl: '8px',\r\n        xxl: '10px',\r\n    },\r\n\r\n    padding: {\r\n        xs: '2px',\r\n        s: '5px',\r\n        m: '10px',\r\n        l: '15px',\r\n        xl: '20px',\r\n        xxl: '30px',\r\n    },\r\n\r\n    margin: {\r\n        s: '5px',\r\n        m: '10px',\r\n        l: '15px',\r\n        xl: '32px',\r\n        xxl: '50px',\r\n    },\r\n\r\n    letterSpacing: {\r\n        s: '1px',\r\n        m: '2px',\r\n        l: '3px',\r\n        xl: '4px',\r\n        xxl: '5px',\r\n    },\r\n};\r\n","import GlobalStyle from '../styles/GlobalStyle';\nimport Wrapper from '../Wrapper';\nimport Title from '../generics/Title';\nimport UserPanel from '../UserPanel';\nimport PreviewPanel from '../PreviewPanel';\nimport { ThemeProvider } from 'styled-components';\nimport { BoxShadowContextProvider } from '../../contexts/boxShadowContext';\nimport { title } from '../../constants/constants';\nimport { theme } from '../../theme/theme';\n\nconst App = () => {\n    return (\n        <>\n            <BoxShadowContextProvider>\n                <GlobalStyle />\n                <ThemeProvider theme={theme}>\n                    <Wrapper>\n                        <Title text={title} />\n                        <UserPanel />\n                        <PreviewPanel />\n                    </Wrapper>\n                </ThemeProvider>\n            </BoxShadowContextProvider>\n        </>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}