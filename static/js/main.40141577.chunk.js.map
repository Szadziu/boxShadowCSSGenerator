{"version":3,"sources":["components/styles/GlobalStyle.js","contexts/boxShadowContext.js","components/TestBox/parts.js","components/TestBox/TestBox.jsx","components/UserPanel/parts.js","components/PreviewPanel/PreviewPanel.jsx","components/Title/parts.js","components/Title/Title.jsx","components/DraggableItem/parts.js","components/DraggableItem/DraggableItem.jsx","components/PropertySlider/parts.js","components/PropertySlider/PropertySlider.jsx","components/UserPanel/UserPanel.jsx","components/Wrapper/parts.js","components/Wrapper/Wrapper.jsx","theme/theme.js","components/App/App.jsx","constants/constants.js","index.js"],"names":["GlobalStyle","createGlobalStyle","BoxShadowContext","createContext","BoxShadowContextProvider","children","useState","offsetX","setOffsetX","offsetY","setOffsetY","spread","setSpread","blur","setBlur","currentColor","setCurrentColor","Provider","value","Box","styled","div","theme","beige","TestBox","useContext","boxShadowContext","Panel","white","ColorPicker","input","TextPicker","CopyButton","button","CopyInfo","span","PreviewPanel","Text","h1","black","Title","text","Item","attrs","style","left","position","orange","DraggableItem","min","max","setValue","setPosition","parentElement","setParentElement","testRef","useRef","useEffect","current","moveItem","e","getBoundingClientRect","width","newPosition","clientX","step","newValue","Math","floor","DRAGGABLE_ITEM_WIDTH","stopDrag","document","removeEventListener","onMouseDown","addEventListener","ref","Wrapper","PropertyName","h2","Slider","PropertySlider","name","onChange","sliderRef","setChoosenPosition","mouseX","DRAGGABLE_WIDTH","abs","setStartPosition","onClick","UserPanel","textInputRef","isTextCopied","setIsTextCopied","type","spellCheck","inputElement","clipboard","select","setSelectionRange","navigator","writeText","setTimeout","target","Container","blue","green","violet","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.40141577.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\nbody {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    font-family: 'Bebas Neue', cursive;\r\n}\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import { createContext, useState } from 'react';\r\n\r\nconst BoxShadowContext = createContext();\r\n\r\nexport const BoxShadowContextProvider = ({ children }) => {\r\n  const [offsetX, setOffsetX] = useState(0);\r\n  const [offsetY, setOffsetY] = useState(0);\r\n  const [spread, setSpread] = useState(0);\r\n  const [blur, setBlur] = useState(0);\r\n  const [currentColor, setCurrentColor] = useState('black');\r\n  return (\r\n    <BoxShadowContext.Provider\r\n      value={{\r\n        offsetX,\r\n        setOffsetX,\r\n        offsetY,\r\n        setOffsetY,\r\n        spread,\r\n        setSpread,\r\n        blur,\r\n        setBlur,\r\n        currentColor,\r\n        setCurrentColor,\r\n      }}\r\n    >\r\n      {children}\r\n    </BoxShadowContext.Provider>\r\n  );\r\n};\r\n\r\nexport default BoxShadowContext;\r\n\r\n// początek dżdżownicy Emilii\r\n// -----|\r\n//      |\r\n//      |\r\n//      |-------:\r\n// koniec dżdżownicy Emilii\r\n","import styled from 'styled-components';\r\n\r\nexport const Box = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-self: center;\r\n  border-radius: 20px;\r\n  width: 300px;\r\n  height: 300px;\r\n  box-shadow: ${({ value }) => value.offsetX}px\r\n    ${({ value }) => value.offsetY}px ${({ value }) => value.spread}px\r\n    ${({ value }) => value.blur}px ${({ value }) => value.currentColor};\r\n\r\n  background-color: ${({ theme }) => theme.beige};\r\n`;\r\n","import { useContext } from 'react';\r\nimport boxShadowContext from '../../contexts/boxShadowContext';\r\nimport * as P from './parts';\r\n\r\nconst TestBox = () => {\r\n  const value = useContext(boxShadowContext);\r\n\r\n  return <P.Box value={value} />;\r\n};\r\n\r\nexport default TestBox;\r\n","import styled from 'styled-components';\r\n\r\nexport const Panel = styled.div`\r\n  position: relative;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  width: 45%;\r\n  height: 70%;\r\n  box-shadow: 0 0 10px 2px black;\r\n  border-radius: 20px;\r\n\r\n  background-color: ${({ theme }) => theme.white};\r\n`;\r\n\r\nexport const ColorPicker = styled.input`\r\n  position: absolute;\r\n  right: 1rem;\r\n  bottom: 1rem;\r\n\r\n  width: 70px;\r\n  height: 70px;\r\n  border: none;\r\n  align-self: flex-end;\r\n\r\n  background-color: transparent;\r\n\r\n  cursor: pointer;\r\n  -webkit-appearance: none;\r\n  -moz-appearance: none;\r\n  appearance: none;\r\n\r\n  &::-webkit-color-swatch {\r\n    border-radius: 50%;\r\n    border: none;\r\n    box-shadow: 0 0 10px 2px black;\r\n  }\r\n\r\n  &::before {\r\n    position: absolute;\r\n    top: 95%;\r\n    left: 5%;\r\n\r\n    text-align: center;\r\n    font-size: 1rem;\r\n    font-family: 'Bebas Neue', cursive;\r\n\r\n    content: 'set color';\r\n  }\r\n`;\r\n\r\nexport const TextPicker = styled.input`\r\n  width: 60%;\r\n  height: 5%;\r\n  align-self: flex-start;\r\n  border: none;\r\n  box-shadow: 0 0 10px 2px black;\r\n  border-radius: 5px;\r\n  padding: 0 20px;\r\n  margin-left: 2rem;\r\n\r\n  background-color: ${({ theme }) => theme.beige};\r\n\r\n  font-weight: 700;\r\n`;\r\n\r\nexport const CopyButton = styled.button`\r\n  position: relative;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 50px;\r\n  height: 20px;\r\n  margin-left: 2rem;\r\n  padding: 15px 30px;\r\n\r\n  font-weight: 700;\r\n  text-transform: uppercase;\r\n\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const CopyInfo = styled.span`\r\n  position: absolute;\r\n  top: 25%;\r\n  right: -150%;\r\n`;\r\n","import TestBox from '../TestBox';\r\nimport { Panel } from '../UserPanel/parts';\r\n\r\nconst PreviewPanel = () => {\r\n  return (\r\n    <Panel>\r\n      <TestBox />\r\n    </Panel>\r\n  );\r\n};\r\n\r\nexport default PreviewPanel;\r\n","import styled from 'styled-components';\r\n\r\nexport const Text = styled.h1`\r\n  width: 100%;\r\n  height: 10%;\r\n  text-transform: uppercase;\r\n\r\n  color: ${({ theme }) => theme.black};\r\n\r\n  font-size: 2rem;\r\n  text-align: center;\r\n`;\r\n","import * as P from './parts';\r\n\r\nconst Title = ({ text }) => {\r\n  return <P.Text>{text}</P.Text>;\r\n};\r\n\r\nexport default Title;\r\n","import styled from 'styled-components';\r\n\r\nexport const Item = styled.button.attrs(({ position }) => ({\r\n  style: {\r\n    left: position,\r\n  },\r\n}))`\r\n  position: absolute;\r\n  top: -50%;\r\n\r\n  width: 40px;\r\n  height: 60px;\r\n  border: none;\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 5px 2px ${({ theme }) => theme.black};\r\n\r\n  background-color: ${({ theme }) => theme.orange};\r\n  color: ${({ theme }) => theme.white};\r\n\r\n  font-weight: 700;\r\n\r\n  cursor: grab;\r\n`;\r\n","import { useEffect, useRef, useState } from 'react';\r\nimport * as P from './parts';\r\n\r\nconst DRAGGABLE_ITEM_WIDTH = 50;\r\n\r\nconst DraggableItem = ({\r\n  min,\r\n  max,\r\n  setValue,\r\n  value,\r\n  setPosition,\r\n  position,\r\n}) => {\r\n  const [parentElement, setParentElement] = useState(null);\r\n  const testRef = useRef();\r\n\r\n  useEffect(() => {\r\n    setParentElement(testRef.current.parentElement);\r\n  }, []);\r\n\r\n  const moveItem = (e) => {\r\n    const { width, left } = parentElement.getBoundingClientRect();\r\n\r\n    let newPosition = e.clientX - left;\r\n\r\n    if (newPosition < 0) newPosition = 0;\r\n    else if (newPosition > width) newPosition = width;\r\n\r\n    if (newPosition < 0) {\r\n      setValue(min);\r\n      return;\r\n    }\r\n    if (newPosition > width) {\r\n      setValue(max);\r\n      return;\r\n    }\r\n\r\n    const step = width / (max - min);\r\n    const newValue = Math.floor(newPosition / step + min);\r\n\r\n    setValue(newValue);\r\n    setPosition(newPosition - DRAGGABLE_ITEM_WIDTH / 2);\r\n  };\r\n\r\n  const startDrag = (e) => {\r\n    document.addEventListener('mousemove', moveItem);\r\n    document.addEventListener('mouseup', stopDrag);\r\n  };\r\n\r\n  const stopDrag = () => {\r\n    document.removeEventListener('mousemove', moveItem);\r\n    document.removeEventListener('mouseup', stopDrag);\r\n  };\r\n\r\n  return (\r\n    <P.Item onMouseDown={startDrag} position={position} ref={testRef}>\r\n      {value}\r\n    </P.Item>\r\n  );\r\n};\r\n\r\nexport default DraggableItem;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  height: 15%;\r\n  margin: 5px 20px;\r\n`;\r\n\r\nexport const PropertyName = styled.h2`\r\n  text-transform: uppercase;\r\n`;\r\n\r\nexport const Slider = styled.div`\r\n  position: relative;\r\n\r\n  width: 60%;\r\n  height: 30px;\r\n  border-radius: 20px;\r\n\r\n  background-color: ${({ theme }) => theme.black};\r\n`;\r\n","import { useState, useRef, useEffect } from 'react';\r\nimport DraggableItem from '../DraggableItem/DraggableItem';\r\nimport * as P from './parts';\r\n\r\nconst DRAGGABLE_WIDTH = 50;\r\n\r\nconst PropertySlider = ({\r\n  name,\r\n  min,\r\n  max,\r\n  onChange = () => {},\r\n  value,\r\n  setValue,\r\n}) => {\r\n  const sliderRef = useRef(null);\r\n  const [position, setPosition] = useState(value);\r\n\r\n  const setChoosenPosition = (e) => {\r\n    const { left, width } = sliderRef.current.getBoundingClientRect();\r\n\r\n    if (e.clientX < left || e.clientX > left + width) return;\r\n\r\n    const mouseX = e.clientX - left;\r\n    const step = width / (max - min);\r\n    const newValue = mouseX / step + min;\r\n\r\n    setPosition(mouseX - DRAGGABLE_WIDTH / 2);\r\n    setValue(Math[newValue > 0 ? 'ceil' : 'floor'](newValue));\r\n  };\r\n\r\n  const setStartPosition = () => {\r\n    const { width } = sliderRef.current.getBoundingClientRect();\r\n    const step = width / (max - min);\r\n    setValue(value);\r\n\r\n    let newPosition;\r\n\r\n    if (value === 0 && min < 0) {\r\n      newPosition = width / 2;\r\n    } else if (value < 0) {\r\n      newPosition = width / 2 - step * Math.abs(value);\r\n    } else {\r\n      newPosition = step * value;\r\n    }\r\n\r\n    setPosition(newPosition - DRAGGABLE_WIDTH / 2);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setStartPosition();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    onChange(value);\r\n  }, [value]);\r\n\r\n  return (\r\n    <>\r\n      <P.Wrapper>\r\n        <P.PropertyName>{name}</P.PropertyName>\r\n        <P.Slider ref={sliderRef} onClick={setChoosenPosition}>\r\n          <DraggableItem\r\n            min={min}\r\n            max={max}\r\n            position={position}\r\n            setPosition={setPosition}\r\n            setChoosenPosition={setChoosenPosition}\r\n            setValue={setValue}\r\n            value={value}\r\n          />\r\n        </P.Slider>\r\n      </P.Wrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PropertySlider;\r\n","import { useContext, useRef, useState } from 'react';\r\nimport PropertySlider from '../PropertySlider/PropertySlider';\r\nimport BoxShadowContext from '../../contexts/boxShadowContext';\r\nimport * as P from './parts';\r\n\r\nconst UserPanel = () => {\r\n  const textInputRef = useRef(null);\r\n  const [isTextCopied, setIsTextCopied] = useState(false);\r\n\r\n  const {\r\n    offsetX,\r\n    setOffsetX,\r\n    offsetY,\r\n    setOffsetY,\r\n    blur,\r\n    setBlur,\r\n    spread,\r\n    setSpread,\r\n    currentColor,\r\n    setCurrentColor,\r\n  } = useContext(BoxShadowContext);\r\n\r\n  const pickColor = (e) => {\r\n    setCurrentColor(e.target.value);\r\n  };\r\n\r\n  const copyBoxShadowProperty = () => {\r\n    const inputElement = textInputRef.current;\r\n    const clipboard = textInputRef.current.value;\r\n\r\n    inputElement.select();\r\n    inputElement.setSelectionRange(0, 99999);\r\n    navigator.clipboard.writeText(clipboard);\r\n\r\n    setIsTextCopied(true);\r\n    setTimeout(() => setIsTextCopied(false), 2000);\r\n  };\r\n\r\n  return (\r\n    <P.Panel>\r\n      <PropertySlider\r\n        value={offsetX}\r\n        setValue={setOffsetX}\r\n        name='offset x'\r\n        min={-100}\r\n        max={100}\r\n      />\r\n      <PropertySlider\r\n        value={offsetY}\r\n        setValue={setOffsetY}\r\n        name='offset y'\r\n        min={-100}\r\n        max={100}\r\n      />\r\n      <PropertySlider\r\n        value={spread}\r\n        setValue={setSpread}\r\n        name='spread'\r\n        min={0}\r\n        max={50}\r\n      />\r\n      <PropertySlider\r\n        value={blur}\r\n        setValue={setBlur}\r\n        name='blur'\r\n        min={0}\r\n        max={50}\r\n      />\r\n      <P.TextPicker\r\n        ref={textInputRef}\r\n        type='text'\r\n        value={`box-shadow: ${offsetX}px ${offsetY}px ${spread}px ${blur}px ${currentColor}`}\r\n        spellCheck={false}\r\n      />\r\n      <P.CopyButton onClick={copyBoxShadowProperty}>\r\n        copy\r\n        {isTextCopied && <P.CopyInfo>copied!</P.CopyInfo>}\r\n      </P.CopyButton>\r\n      <P.ColorPicker type='color' value={currentColor} onChange={pickColor} />\r\n    </P.Panel>\r\n  );\r\n};\r\n\r\nexport default UserPanel;\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-around;\r\n  width: 100vw;\r\n  height: 100vh;\r\n\r\n  background-color: ${({ theme }) => theme.white};\r\n`;\r\n","import * as P from './parts';\r\n\r\nconst Wrapper = ({ children }) => {\r\n  return <P.Container>{children}</P.Container>;\r\n};\r\n\r\nexport default Wrapper;\r\n","export const theme = {\r\n  blue: '#c4e4f6',\r\n  black: '#1a1a1a',\r\n  white: '#fff',\r\n  green: '#4FDB52',\r\n  orange: '#DB6C12',\r\n  violet: '#8975DB',\r\n  beige: 'rgb(220,220,200)',\r\n};\r\n","import { ThemeProvider } from 'styled-components';\nimport GlobalStyle from '../styles/GlobalStyle';\nimport PreviewPanel from '../PreviewPanel';\nimport Title from '../Title';\nimport UserPanel from '../UserPanel';\nimport Wrapper from '../Wrapper';\n\nimport { BoxShadowContextProvider } from '../../contexts/boxShadowContext';\nimport { title } from '../../constants/constants';\nimport { theme } from '../../theme/theme';\n\nconst App = () => {\n  return (\n    <>\n      <BoxShadowContextProvider>\n        <GlobalStyle />\n        <ThemeProvider theme={theme}>\n          <Wrapper>\n            <Title text={title} />\n            <UserPanel />\n            <PreviewPanel />\n          </Wrapper>\n        </ThemeProvider>\n      </BoxShadowContextProvider>\n    </>\n  );\n};\n\nexport default App;\n","export const title = \"box-shadow css generator\";\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}