{"version":3,"sources":["components/styles/GlobalStyle.js","components/generics/Title/parts.js","components/generics/Title/Title.jsx","components/generics/Panel/parts.js","components/generics/Panel/Panel.jsx","components/TestBox/parts.js","components/TestBox/TestBox.jsx","contexts/boxShadowContext.js","components/PreviewPanel/PreviewPanel.jsx","components/DraggableItem/parts.js","components/DraggableItem/DraggableItem.jsx","components/generics/PropertySlider/parts.js","components/generics/PropertySlider/PropertySlider.jsx","components/UserPanel/parts.js","components/UserPanel/UserPanel.jsx","components/hooks/useWindowDimensions.js","components/Wrapper/parts.js","components/Wrapper/Wrapper.jsx","constants/constants.js","theme/theme.js","components/App/App.jsx","index.js"],"names":["GlobalStyle","createGlobalStyle","Text","styled","h1","theme","black","Title","text","Wrapper","div","white","Panel","children","Box","attrs","value","style","boxShadow","offsetX","offsetY","spread","blur","currentColor","beige","TestBox","BoxShadowContext","createContext","BoxShadowContextProvider","useState","setOffsetX","setOffsetY","setSpread","setBlur","setCurrentColor","Provider","PreviewPanel","useContext","boxShadowContext","Item","button","left","position","orange","DraggableItem","min","max","setValue","setPosition","setStartPosition","parentElement","setParentElement","testRef","useRef","useEffect","current","moveItem","e","getBoundingClientRect","width","newPosition","clientX","step","newValue","Math","floor","DRAGGABLE_ITEM_WIDTH","stopDrag","document","removeEventListener","onMouseDown","addEventListener","ref","PropertyName","h2","Slider","PropertySlider","name","onChange","sliderRef","setChoosenPosition","mouseX","DRAGGABLE_WIDTH","abs","onClick","ColorPicker","input","TextPicker","CopyButton","CopyInfo","span","UserPanel","textInputRef","isTextCopied","setIsTextCopied","type","readOnly","spellCheck","inputElement","clipboard","select","setSelectionRange","navigator","writeText","setTimeout","target","getWindowDimensions","window","innerWidth","height","innerHeight","Container","MobileScreen","windowDimensions","setWindowDimensions","handleResize","useWindowDimensions","isDesktopScreen","blue","green","violet","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cf420d23.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\nbody {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    font-family: 'Bebas Neue', cursive;\r\n}\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import styled from 'styled-components';\r\n\r\nexport const Text = styled.h1`\r\n  width: 100%;\r\n  height: 10%;\r\n  text-transform: uppercase;\r\n\r\n  color: ${({ theme }) => theme.black};\r\n\r\n  font-size: 2rem;\r\n  text-align: center;\r\n\r\n  @media (min-width: 1920px) {\r\n    font-size: 3rem;\r\n  }\r\n  @media (min-width: 3840px) {\r\n    font-size: 5rem;\r\n  }\r\n`;\r\n","import * as P from './parts';\r\n\r\nconst Title = ({ text }) => {\r\n  return <P.Text>{text}</P.Text>;\r\n};\r\n\r\nexport default Title;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  position: relative;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  width: 45%;\r\n  height: 70%;\r\n  box-shadow: 0 0 10px 2px black;\r\n  border-radius: 20px;\r\n\r\n  background-color: ${({ theme }) => theme.white};\r\n`;\r\n","import * as P from './parts';\r\n\r\nconst Panel = ({ children }) => {\r\n  return <P.Wrapper>{children}</P.Wrapper>;\r\n};\r\n\r\nexport default Panel;\r\n","import styled from 'styled-components';\r\n\r\nexport const Box = styled.div.attrs(({ value }) => ({\r\n  style: {\r\n    boxShadow: `${value.offsetX}px ${value.offsetY}px ${value.spread}px ${value.blur}px ${value.currentColor}`,\r\n  },\r\n}))`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-self: center;\r\n  border-radius: 20px;\r\n  width: 40vh;\r\n  height: 40vh;\r\n\r\n  background-color: ${({ theme }) => theme.beige};\r\n`;\r\n","import * as P from './parts';\r\n\r\nconst TestBox = ({ value }) => {\r\n  return <P.Box value={value} />;\r\n};\r\n\r\nexport default TestBox;\r\n","import { createContext, useState } from 'react';\r\n\r\nconst BoxShadowContext = createContext();\r\n\r\nexport const BoxShadowContextProvider = ({ children }) => {\r\n  const [offsetX, setOffsetX] = useState(0);\r\n  const [offsetY, setOffsetY] = useState(0);\r\n  const [spread, setSpread] = useState(0);\r\n  const [blur, setBlur] = useState(0);\r\n  const [currentColor, setCurrentColor] = useState('#000000');\r\n  return (\r\n    <BoxShadowContext.Provider\r\n      value={{\r\n        offsetX,\r\n        setOffsetX,\r\n        offsetY,\r\n        setOffsetY,\r\n        spread,\r\n        setSpread,\r\n        blur,\r\n        setBlur,\r\n        currentColor,\r\n        setCurrentColor,\r\n      }}\r\n    >\r\n      {children}\r\n    </BoxShadowContext.Provider>\r\n  );\r\n};\r\n\r\nexport default BoxShadowContext;\r\n\r\n// początek dżdżownicy Emilii\r\n// -----|\r\n//      |\r\n//      |\r\n//      |-------:\r\n// koniec dżdżownicy Emilii\r\n","import { useContext } from 'react';\r\nimport Panel from '../generics/Panel';\r\nimport TestBox from '../TestBox';\r\nimport boxShadowContext from '../../contexts/boxShadowContext';\r\n\r\nconst PreviewPanel = () => {\r\n  const value = useContext(boxShadowContext);\r\n  return (\r\n    <Panel>\r\n      <TestBox value={value} />\r\n    </Panel>\r\n  );\r\n};\r\n\r\nexport default PreviewPanel;\r\n","import styled from 'styled-components';\r\n\r\nexport const Item = styled.button.attrs(({ position }) => ({\r\n  style: {\r\n    left: position,\r\n  },\r\n}))`\r\n  position: absolute;\r\n  top: -50%;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 40px;\r\n  height: 60px;\r\n  border: none;\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 5px 2px ${({ theme }) => theme.black};\r\n\r\n  background-color: ${({ theme }) => theme.orange};\r\n  color: ${({ theme }) => theme.white};\r\n\r\n  font-size: 1rem\r\n  font-weight: 700;\r\n\r\n  cursor: grab;\r\n\r\n  @media(min-width: 1920px) {\r\n    font-size: 1.2rem\r\n  }\r\n`;\r\n","import { useEffect, useRef, useState } from 'react';\r\nimport * as P from './parts';\r\n// import useWindowDimensions from '../hooks/useWindowDimensions';\r\n\r\nconst DRAGGABLE_ITEM_WIDTH = 50;\r\n\r\nconst DraggableItem = ({\r\n  min,\r\n  max,\r\n  setValue,\r\n  value,\r\n  setPosition,\r\n  position,\r\n  setStartPosition,\r\n}) => {\r\n  const [parentElement, setParentElement] = useState(null);\r\n  const testRef = useRef();\r\n  // const { width, height } = useWindowDimensions();\r\n\r\n  // useEffect(() => {\r\n  //   setStartPosition();\r\n  // }, [width, height]);\r\n\r\n  useEffect(() => {\r\n    setParentElement(testRef.current.parentElement);\r\n  }, []);\r\n\r\n  const moveItem = (e) => {\r\n    const { width, left } = parentElement.getBoundingClientRect();\r\n\r\n    let newPosition = e.clientX - left;\r\n\r\n    if (newPosition < 0) newPosition = 0;\r\n    else if (newPosition > width) newPosition = width;\r\n\r\n    if (newPosition < 0) {\r\n      setValue(min);\r\n      return;\r\n    }\r\n    if (newPosition > width) {\r\n      setValue(max);\r\n      return;\r\n    }\r\n\r\n    const step = width / (max - min);\r\n    const newValue = Math.floor(newPosition / step + min);\r\n\r\n    setValue(newValue);\r\n    setPosition(newPosition - DRAGGABLE_ITEM_WIDTH / 2);\r\n  };\r\n\r\n  const startDrag = (e) => {\r\n    document.addEventListener('mousemove', moveItem);\r\n    document.addEventListener('mouseup', stopDrag);\r\n  };\r\n\r\n  const stopDrag = () => {\r\n    document.removeEventListener('mousemove', moveItem);\r\n    document.removeEventListener('mouseup', stopDrag);\r\n  };\r\n\r\n  return (\r\n    <P.Item onMouseDown={startDrag} position={position} ref={testRef}>\r\n      {value}\r\n    </P.Item>\r\n  );\r\n};\r\n\r\nexport default DraggableItem;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  height: 15%;\r\n  margin: 5px 50px;\r\n`;\r\n\r\nexport const PropertyName = styled.h2`\r\n  font-size: 2rem;\r\n  text-transform: uppercase;\r\n\r\n  @media (min-width: 3840px) {\r\n    font-size: 5rem;\r\n  }\r\n`;\r\n\r\nexport const Slider = styled.div`\r\n  position: relative;\r\n\r\n  width: 50%;\r\n  height: 30px;\r\n  border-radius: 20px;\r\n\r\n  background-color: ${({ theme }) => theme.black};\r\n`;\r\n","import { useState, useRef, useEffect } from 'react';\r\nimport DraggableItem from '../../DraggableItem';\r\nimport * as P from './parts';\r\n\r\nconst DRAGGABLE_WIDTH = 50;\r\n\r\nconst PropertySlider = ({\r\n  name,\r\n  min,\r\n  max,\r\n  onChange = () => {},\r\n  value,\r\n  setValue,\r\n}) => {\r\n  const sliderRef = useRef(null);\r\n  const [position, setPosition] = useState(value);\r\n\r\n  const setChoosenPosition = (e) => {\r\n    const { left, width } = sliderRef.current.getBoundingClientRect();\r\n\r\n    if (e.clientX < left || e.clientX > left + width) return;\r\n\r\n    const mouseX = e.clientX - left;\r\n    const step = width / (max - min);\r\n    const newValue = mouseX / step + min;\r\n\r\n    setPosition(mouseX - DRAGGABLE_WIDTH / 2);\r\n    setValue(Math[newValue > 0 ? 'ceil' : 'floor'](newValue));\r\n  };\r\n\r\n  const setStartPosition = () => {\r\n    const { width } = sliderRef.current.getBoundingClientRect();\r\n    const step = width / (max - min);\r\n    setValue(value);\r\n\r\n    let newPosition;\r\n\r\n    if (value === 0 && min < 0) {\r\n      newPosition = width / 2;\r\n    } else if (value < 0) {\r\n      newPosition = width / 2 - step * Math.abs(value);\r\n    } else {\r\n      newPosition = step * value;\r\n    }\r\n\r\n    setPosition(newPosition - DRAGGABLE_WIDTH / 2);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setStartPosition();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    onChange(value);\r\n  }, [value]);\r\n\r\n  return (\r\n    <>\r\n      <P.Wrapper>\r\n        <P.PropertyName>{name}</P.PropertyName>\r\n        <P.Slider ref={sliderRef} onClick={setChoosenPosition}>\r\n          <DraggableItem\r\n            min={min}\r\n            max={max}\r\n            position={position}\r\n            setPosition={setPosition}\r\n            setChoosenPosition={setChoosenPosition}\r\n            setStartPosition={setStartPosition}\r\n            setValue={setValue}\r\n            value={value}\r\n          />\r\n        </P.Slider>\r\n      </P.Wrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PropertySlider;\r\n","import styled from 'styled-components';\r\n\r\nexport const ColorPicker = styled.input`\r\n  position: absolute;\r\n  right: 1rem;\r\n  bottom: 1rem;\r\n\r\n  width: 70px;\r\n  height: 70px;\r\n  border: none;\r\n  align-self: flex-end;\r\n\r\n  background-color: transparent;\r\n\r\n  cursor: pointer;\r\n  appearance: none;\r\n\r\n  &::-webkit-color-swatch {\r\n    border-radius: 50%;\r\n    border: none;\r\n    box-shadow: 0 0 10px 2px black;\r\n  }\r\n\r\n  &::before {\r\n    position: absolute;\r\n    top: 95%;\r\n    left: 5%;\r\n\r\n    text-align: center;\r\n    font-size: 1rem;\r\n    font-family: 'Bebas Neue', cursive;\r\n\r\n    content: 'set color';\r\n\r\n    @media (min-width: 1920px) {\r\n      top: 30%;\r\n      left: -150%;\r\n      font-size: 1.5rem;\r\n    }\r\n    @media (min-width: 3840px) {\r\n      font-size: 3.5rem;\r\n    }\r\n  }\r\n\r\n  @media (min-width: 3840px) {\r\n    width: 150px;\r\n    height: 150px;\r\n  }\r\n`;\r\n\r\nexport const TextPicker = styled.input`\r\n  width: 60%;\r\n  height: 5%;\r\n  align-self: flex-start;\r\n  border: none;\r\n  box-shadow: 0 0 10px 2px black;\r\n  border-radius: 5px;\r\n  padding: 0 20px;\r\n  margin-left: 2rem;\r\n\r\n  background-color: ${({ theme }) => theme.beige};\r\n\r\n  font-weight: 700;\r\n\r\n  @media (min-width: 1920px) {\r\n    font-size: 1.2rem;\r\n  }\r\n  @media (min-width: 3840px) {\r\n    font-size: 2.4rem;\r\n  }\r\n`;\r\n\r\nexport const CopyButton = styled.button`\r\n  position: relative;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 50px;\r\n  height: 20px;\r\n  margin-left: 2rem;\r\n  padding: 15px 30px;\r\n\r\n  font-weight: 700;\r\n  text-transform: uppercase;\r\n\r\n  cursor: pointer;\r\n\r\n  @media (min-width: 1920px) {\r\n    width: 100px;\r\n    height: 40px;\r\n    font-size: 1.5rem;\r\n  }\r\n  @media (min-width: 3840px) {\r\n    width: 200px;\r\n    height: 80px;\r\n    font-size: 2.5rem;\r\n  }\r\n`;\r\n\r\nexport const CopyInfo = styled.span`\r\n  position: absolute;\r\n  top: 25%;\r\n  right: -150%;\r\n`;\r\n","import { useContext, useRef, useState } from 'react';\r\nimport Panel from '../generics/Panel';\r\nimport PropertySlider from '../generics/PropertySlider';\r\nimport BoxShadowContext from '../../contexts/boxShadowContext';\r\nimport * as P from './parts';\r\n\r\nconst UserPanel = () => {\r\n  const textInputRef = useRef(null);\r\n  const [isTextCopied, setIsTextCopied] = useState(false);\r\n\r\n  const {\r\n    offsetX,\r\n    setOffsetX,\r\n    offsetY,\r\n    setOffsetY,\r\n    blur,\r\n    setBlur,\r\n    spread,\r\n    setSpread,\r\n    currentColor,\r\n    setCurrentColor,\r\n  } = useContext(BoxShadowContext);\r\n\r\n  const pickColor = (e) => {\r\n    setCurrentColor(e.target.value);\r\n  };\r\n\r\n  const copyBoxShadowProperty = () => {\r\n    const inputElement = textInputRef.current;\r\n    const clipboard = textInputRef.current.value;\r\n\r\n    inputElement.select();\r\n    inputElement.setSelectionRange(0, 99999);\r\n    navigator.clipboard.writeText(clipboard);\r\n\r\n    setIsTextCopied(true);\r\n    setTimeout(() => setIsTextCopied(false), 2000);\r\n  };\r\n\r\n  return (\r\n    <Panel>\r\n      <PropertySlider\r\n        value={offsetX}\r\n        setValue={setOffsetX}\r\n        name='offset x'\r\n        min={-100}\r\n        max={100}\r\n      />\r\n      <PropertySlider\r\n        value={offsetY}\r\n        setValue={setOffsetY}\r\n        name='offset y'\r\n        min={-100}\r\n        max={100}\r\n      />\r\n      <PropertySlider\r\n        value={spread}\r\n        setValue={setSpread}\r\n        name='spread'\r\n        min={0}\r\n        max={50}\r\n      />\r\n      <PropertySlider\r\n        value={blur}\r\n        setValue={setBlur}\r\n        name='blur'\r\n        min={0}\r\n        max={50}\r\n      />\r\n      <P.TextPicker\r\n        ref={textInputRef}\r\n        type='text'\r\n        value={`box-shadow: ${offsetX}px ${offsetY}px ${spread}px ${blur}px ${currentColor}`}\r\n        readOnly\r\n        spellCheck={false}\r\n      />\r\n      <P.CopyButton onClick={copyBoxShadowProperty}>\r\n        copy\r\n        {isTextCopied && <P.CopyInfo>copied!</P.CopyInfo>}\r\n      </P.CopyButton>\r\n      <P.ColorPicker type='color' value={currentColor} onChange={pickColor} />\r\n    </Panel>\r\n  );\r\n};\r\n\r\nexport default UserPanel;\r\n","import { useState, useEffect } from 'react';\r\n\r\nconst getWindowDimensions = () => {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return { width, height };\r\n};\r\n\r\nexport default function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(\r\n    getWindowDimensions()\r\n  );\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWindowDimensions(getWindowDimensions());\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-around;\r\n  width: 100vw;\r\n  height: 100vh;\r\n\r\n  background-color: ${({ theme }) => theme.white};\r\n`;\r\n\r\nexport const MobileScreen = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100vw;\r\n  height: 100vh;\r\n\r\n  background-color: cadetblue;\r\n\r\n  font-size: 1.2rem;\r\n  text-align: center;\r\n  color: ${({ theme }) => theme.white};\r\n\r\n  @media (min-width: 768px) {\r\n    font-size: 1.8rem;\r\n  }\r\n`;\r\n","import { mobileInfo } from '../../constants/constants';\r\nimport useWindowDimensions from '../hooks/useWindowDimensions';\r\nimport * as P from './parts';\r\n\r\nconst Wrapper = ({ children }) => {\r\n  const { width, height } = useWindowDimensions();\r\n  const isDesktopScreen = width >= 800 && height >= 600;\r\n\r\n  return (\r\n    <>\r\n      {isDesktopScreen ? (\r\n        <P.Container>{children}</P.Container>\r\n      ) : (\r\n        <P.MobileScreen>{mobileInfo}</P.MobileScreen>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Wrapper;\r\n","export const title = 'box-shadow css generator';\r\n\r\nexport const mobileInfo =\r\n  'Sorry the application is only available on the desktop devices (min 800x600 resolution)';\r\n","export const theme = {\r\n  blue: '#C4E4F6',\r\n  black: '#000000',\r\n  white: '#FFFFFF',\r\n  green: '#4FDB52',\r\n  orange: '#DB6C12',\r\n  violet: '#8975DB',\r\n  beige: '#DCDCC8',\r\n};\r\n","import { ThemeProvider } from 'styled-components';\nimport GlobalStyle from '../styles/GlobalStyle';\nimport Title from '../generics/Title';\nimport PreviewPanel from '../PreviewPanel';\nimport UserPanel from '../UserPanel';\nimport Wrapper from '../Wrapper';\nimport { BoxShadowContextProvider } from '../../contexts/boxShadowContext';\nimport { title } from '../../constants/constants';\nimport { theme } from '../../theme/theme';\n\nconst App = () => {\n  return (\n    <>\n      <BoxShadowContextProvider>\n        <GlobalStyle />\n        <ThemeProvider theme={theme}>\n          <Wrapper>\n            <Title text={title} />\n            <UserPanel />\n            <PreviewPanel />\n          </Wrapper>\n        </ThemeProvider>\n      </BoxShadowContextProvider>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}